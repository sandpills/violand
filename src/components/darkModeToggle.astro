---
// Dark mode toggle component that uses shared dark mode functionality
---

<button
    id="darkModeToggle"
    class="my-3 mx-4 w-12 h-12 bg-bright dark:bg-dark-bright shadow-lg hover:shadow-xl transition-all duration-300 dark:border-red-700 cursor-pointer flex items-center justify-center hover:scale-108"
    style="cursor: pointer !important; pointer-events: auto !important;"
    aria-label="Toggle dark mode"
>
    <!-- Sun icon for light mode -->
    <svg
        id="sunIcon"
        class="w-10 h-10 text-blue-700"
        fill="currentColor"
        viewBox="0 0 20 20"
    >
        <path
            fill-rule="evenodd"
            d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
            clip-rule="evenodd"></path>
    </svg>

    <!-- Moon icon for dark mode -->
    <svg
        id="moonIcon"
        class="w-8 h-8 text-dark-text hidden"
        fill="currentColor"
        viewBox="0 0 20 20"
    >
        <path
            d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
        ></path>
    </svg>
</button>

<script>
    // Function to update the toggle visual state based on current theme
    function updateToggleState() {
        const sunIcon = document.getElementById("sunIcon");
        const moonIcon = document.getElementById("moonIcon");
        const darkModeToggle = document.getElementById("darkModeToggle");
        const html = document.documentElement;

        if (html.classList.contains("dark")) {
            sunIcon?.classList.add("hidden");
            moonIcon?.classList.remove("hidden");
            darkModeToggle?.classList.remove("rounded-sm");
            darkModeToggle?.classList.add("rounded-full");
        } else {
            sunIcon?.classList.remove("hidden");
            moonIcon?.classList.add("hidden");
            darkModeToggle?.classList.remove("rounded-full");
            darkModeToggle?.classList.add("rounded-sm");
        }
    }

    // Wait for DOM to be fully loaded and dark mode functions to be available
    document.addEventListener("DOMContentLoaded", () => {
        const darkModeToggle = document.getElementById("darkModeToggle");

        // Set initial state
        updateToggleState();

        // Add click event listener to toggle theme
        darkModeToggle?.addEventListener("click", () => {
            if (window.darkMode) {
                window.darkMode.toggleTheme();
                // Update the toggle state after theme change
                setTimeout(updateToggleState, 0);
            }
        });

        // Listen for theme changes from other sources
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (
                    mutation.type === "attributes" &&
                    mutation.attributeName === "class"
                ) {
                    updateToggleState();
                }
            });
        });

        // Observe changes to the html element's class attribute
        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ["class"],
        });
    });
</script>
